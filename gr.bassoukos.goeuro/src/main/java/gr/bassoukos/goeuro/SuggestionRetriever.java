package gr.bassoukos.goeuro;

import gr.bassoukos.goeuro.om.ErrorResponse;
import gr.bassoukos.goeuro.om.Position;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;

/**
 * Search remote position suggestion API.
 * 
 * @author abas
 */
public class SuggestionRetriever {
	public static final String TARGET_API = "http://api.goeuro.com/api/v2/position/suggest/en/";

	/**
	 * Initialize with the MOXy JSON feature and the corresponding configuration
	 * class.
	 */
	public SuggestionRetriever() {
	}

	/**
	 * Fetch suggestions from the server.
	 * 
	 * @param searchTerm
	 *            the search term to use for the suggestions.
	 * @return the suggested positions generated by the server.
	 * @throws ErrorResponse
	 *             if the server responded with an error
	 * @throws IOException
	 */
	public List<Position> search(String searchTerm) throws ErrorResponse,
			IOException {
		final ArrayList<Position> results = new ArrayList<>();
		search(searchTerm, new Collector<Position>() {
			@Override
			public void collect(Position t) {
				results.add(t);
			}
		});
		return results;
	}

	public static interface Collector<T> {
		public void collect(T t);
	}

	public void search(String searchTerm, Collector<Position> c)
			throws ErrorResponse, IOException {
		URL url = new URL(new URL(TARGET_API), URLEncoder.encode(searchTerm,
				"UTF-8"));
		Gson gson = new Gson();
		try (JsonReader reader = new JsonReader(new InputStreamReader(
				url.openStream(), "UTF-8"))) {
			// if the object isn't an array, response is an ErrorResponse -
			// throw it.
			if (!reader.peek().equals(JsonToken.BEGIN_ARRAY)) {
				// interesting, type inference won't work without the local
				// variable declaration.
				ErrorResponse e = gson.fromJson(reader, ErrorResponse.class);
				throw e;
			}

			reader.beginArray();
			while (reader.hasNext()) {
				Position pos = gson.fromJson(reader, Position.class);
				c.collect(pos);
			}
			reader.endArray();
		}
	}
}

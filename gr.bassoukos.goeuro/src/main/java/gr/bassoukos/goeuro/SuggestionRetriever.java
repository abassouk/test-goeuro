package gr.bassoukos.goeuro;

import gr.bassoukos.goeuro.om.ErrorResponse;
import gr.bassoukos.goeuro.om.Position;

import java.util.List;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.moxy.json.MoxyJsonFeature;

/**
 * Search remote position suggestion API.
 * 
 * @author abas
 */
public class SuggestionRetriever {
	public static final String TARGET_API = "http://api.goeuro.com/api/v2/position/suggest/en/";

	/**
	 * Initialize with the MOXy JSON feature and the corresponding configuration
	 * class.
	 */
	public SuggestionRetriever() {
		this(new ClientConfig().register(MoxyJsonFeature.class).register(
				MoxyConfigurationProvider.class));
	}

	/**
	 * Initialize with a given configuration.
	 * 
	 * @param configuration
	 *            existing configuration - should handle JSON responses.
	 */
	public SuggestionRetriever(ClientConfig configuration) {
		this(ClientBuilder.newClient(configuration));
	}

	/**
	 * Initialize with a ready-made client. This client should handle JSON
	 * responses.
	 * 
	 * @param client
	 */
	public SuggestionRetriever(Client client) {
		this.client = client;
	}

	private Client client;

	/**
	 * Fetch suggestions from the server.
	 * 
	 * @param searchTerm
	 *            the search term to use for the suggestions.
	 * @return the suggested positions generated by the server.
	 * @throws ErrorResponse
	 *             if the server responded with an error
	 */
	public List<Position> search(String searchTerm) throws ErrorResponse {
		// response gotchas:
		// the path() method will take care to properly format special
		// characters (Q: what happens if a slash is present? A: exception)
		//
		// the media type specification is not strictly necessary, as the
		// endpoint will respond with JSON by default.
		Response response = client.target(TARGET_API).path(searchTerm)
				.request(MediaType.APPLICATION_JSON).get();

		// if status is not OK, response is an ErrorResponse - show it and
		// signal error.
		if (response.getStatus() != Status.OK.getStatusCode()) {
			throw response.readEntity(ErrorResponse.class);
		}

		// All OK, get a list of positions.
		return response.readEntity(new ListOfPositions());
	}
}
